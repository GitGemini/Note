1.架构
     架构一般是对整个系统的，并非针对某个单独的问题，是针对整个系统的一张蓝图。架构与具体的语言平台无关。

2.模式
     对于软件开发中遇到的一些特定问题，前人总结出来的特定的经验，解决方法。
     解决特定问题的一种方式就叫模式。

3.框架
     架构设计，模式应用的经验积累的具体代码实现，方便以后的复用。
比如Asp.net mvc、NHibernate,NSpring、.....

4.理解分层
      逻辑分层N-Layer
	逻辑上将系统中不同的功能模块，不同子系统等进行分层。
	好的逻辑分层可以让后选择物理架构更灵活，选择性更大。
	三层架构就属于逻辑分层
      物理分层N-Tier
	物理部署时将系统的不同模块部署在不同的服务器上 

三层架构：
	界面层UI
	数据访问层DAL(Data Access Layer)
	业务逻辑层BLL(Business Logiic Layer)
说明:
实体类就是Model，对数据进行操作的代码写在DAL中，一般就是Sql语句，DAL只有对数据的操作，没有如果“金额大于20就不能删除”这样的逻辑；
BLL调用DAL中的代码进行逻辑操作，比如“金额大于20就不能删除”。SQL语句.ADO.Net的类一般只出现在DAL中


写三层的步骤：
1.分析功能.

2.根据功能确定Sql语句

3.在数据访问层编写执行该Sql语句的函数。
该函数应该在那个类中?
一般情况下，当前Sql语句要操作那张表，那么就在数据访问层中建一类，这个类的名字与该表名相同，所有操作都放在这个类中。编写方法之前需要确定参数与返回值

4.编写业务逻辑层
TblStudentBll
编写方法，先确定方法的参数和返回值
返回值一般取决于表现层调用该方法时需要的返回值


5.编写表现层代码
1.采集数据
2.显示结果
注意:在表现层中只调用业务逻辑层的方法,绝不能调用数据访问层的方法