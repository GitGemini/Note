/*static 关键字 比对象先加载
 * 解决对象的数据共享问题
 * private static String country="cn";   //私有的静态变量不能用ClassName.变量名来访问。提供平setter和getter方法，但仍然属于这个类的。所有实例对象共享
 * 特点:
 * 1、static是一个修饰符，用来修饰成员，不能修饰局部变量
 * 2、被static修饰的成员，被所有的实例对象共享
 * 3、static成员 优先于对象存在，因为static成员随着类的加载就已经存在了
 * 4、只要不是private 的可以直接使用类名进行调用
 * 5、static修饰的是共享数据，对象中存储的是特有数据
 * 
 * 成员变量(实例变量)和静态变量(类变量)的区别
 * 1、两个变量的生命周期不一样
 *   成员变量随着对象的创建而存在，随着对象的被回收而释放
 *   静态变量会随着类的加载而存在，随着类的消失而消失
 * 2、调用方式不同
 * 	  成员变量只能被对象调用
 *   静态变量可以被对象调用，还可以被类名调用
 * 3、数据存储位置不同
 * 	  成员变量存储在堆内存的对象中，所以也叫对象的持有数据
 *   静态变量存储在方法区(共享数据区)的静态区，所以也叫对象的共享数据
 *     
 * 静态方法
 * 1、静态方法只能访问静态成员 (非静态方法既可以访问静态又可以访问非静态)。
 * 2、静态方法中不可以使用this和super关键字
 * 3、主函数是静态的
 */
 /* 主函数的特殊性:
 * 1、格式是固定的
 * 2、被jvm所识别和调用
 * public:应为权限是最大的
 * static 不需要对象的
 * void 主函数没有具体的返回值
 * String[] args 这是主函数的参数列表，是一个数组类型的参数，而且元素都是字符串类型
 */
 
 /*
 * 静态代码块
 * static {
		
	}
	随着类的加载而执行，而且只执行一次
	作用:
		用于给类进行初始化
 */

/*构造代码块
 * {
		//构造代码块   可以给所有对象进行初始化的
	}
	
	
	
	方法中{ 局部代码块，限制局部变量的生存周期
	}
 */