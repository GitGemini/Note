/*接口 interface 
 * 当一个抽象类中的方法都是抽象方法时，这时可以将该抽象类用另一种形式定义和表示，就是接口interface
 * 接口当中常见的成员 
 * 1、全局常量  public static final 可以省略不写
 * 2、抽象方法  public abstrace 可以省略不写
 * 
 * 类与类之间是继承关系，类与接口之间是实现关系
 * 接口不可以被实例化
 * 只能有实现了接口的子类并覆盖了接口中所有的抽象方法后，该子类才可以实例化，否则这个子类就是一个抽象类
 * 
 * 多实现：一个类实现多个接口
 * 
 * 一个类在继承一个类的时候，还可以实现多个接口
 * 
 * 接口的出现避免了单继承的局限性
 * 
 * 接口与接口之间是继承关系，接口可以实现多继承
 * 
 * 接口的特点:
 * 接口是对外暴露的规则
 * 接口是程序的功能扩展
 * 接口的出现降低耦合性
 * 
 * 接口与抽象类的区别:
 * 	相同点:
 * 		都是不断向上抽取而来
 *  不同点:
 *  1、 抽象类需要被继承，而且只能单继承
 *     接口需要被实现，而且可以多实现
 *  2、
 *     抽象类中中可以定义抽象方法和费抽象方法，子类继承后可以直接使用非抽象方法。
 *     接口中只能定义抽象方法，必须由子类去实现
 *  3、
 *     抽象类的继承，是is a关系，在定义该体系的的基本共性类容
 *     接口的实现是 like a 关系，在定义体系的额外功能
 *     
 *     在不同的问题领域中，有不同的分析方式
 *     
 *     接口类型的引用:用于接收实现这个接口的子类对象
 */