/*多态  Polymorphism
 * 一个对象对应着不同类型
 * 多态在代码中的体现：
 * 		父类或者接口的引用指向了其子类的对象
 * 多态的好处:
 * 		提高代码的扩展性，前期定义的代码可以使用后期的代码
 * 
 * 多态的弊端和局限性：
 * 		前期定义的内容不能调用后期子类特有的功能
 * 
 * 多态的前提:
 * 		1、必须有关系，继承，实现
 * 		2、要有覆盖
 * 		
 * 自动类型提升(向上转型)：
 * Aniaml a = new Cat();  //Cat向上提升为Animal
 * 访问上出现了局限性，不能访问Cat的特有内容，限制对特有功能的访问 
 * 如果还想用Ca	t的特有功能，可以将对象进行向下转型 (Cat)c,目的是为了使用子类中的特有方法	
 * 转型自始至终都是子类对象在做着类型的变化
 * 
 * instanceof 用于判断对象的具体类型，只能用于引用数据类型判断
 * 
 * 多态中的成员特点：
 * 	1、成员变量
 * 		编译时：参考引用型变量所属的类中是否有调用的 成员变量，有编译通过，没有则编译失败
 * 		运行时:参考引用型变量所属的类中是否有调用的成员变量，并运行该类中所属的成员变量
 * 		简单说：编译和运行都参考 = 的左边
 * 
 * 
 *  2、成员函数
 *  	编译时:参考引用型变量所属的类中是否有调用的 函数，有编译通过，没有则编译失败
 *  	运行时:参考的是对象所属的类中是否有调用的函数
 *  	简单说:编译看左边，运行看右边
 *  3、静态函数
 *  	编译时:参考引用型变量所属的类中是否有调用的静态函数，有编译通过，没有则编译失败
 *  	运行时:参考引用型变量所属的类中是否有调用的静态函数，有编译通过，没有则编译失败
 *  	静态都是属于类的，编译和运行只看等号左边
 */