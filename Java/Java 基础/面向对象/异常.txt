/*
异常：是在运行时期发生的不正常情况
在java中用类的形式对不正常情况进行了描述和封装对象

描述不正常情况的类称为异常类 

通过面向对象的思想将问题封装成对象
不同的问题用不同的类进行具体的描述。比如空指针，数组越界等

问题很多，意味着描述的类也很多，将其共性向上抽取，形成了异常体系
最终异常就分为两大类
这两大类得父类是Throwable
一般不可处理的Error
	由jvm抛出的严重性问题，这种问题发生一般不针对性处理，直接修改程序
	
可以处理的 Exception
	可以有针对性的处理方式

该体系的特点就是Throwable及其所有的子类都具有可抛性，通过throws和throw两个关键字抛出

自定义异常：定义一个异常类，继承自异常体系，这样才具有可抛型 throws throw，一般都继承自Exception或者RuntimeException

异常的分类
1、编译时被监测的异常 Exception和其子类，除了RuntimeException  需要throws或者try catch ，必须处理后才能编译通过
	这种问题一旦出现，希望在编译时就进行检测，让这种问题有对应的处理方式，这样的问题都可以进行针对性处理
	
2、运行时异常:RuntimeException和其子类 ，可以直接throw ，不用处理
	这种问题的发生，无法让工能继续，运算无法进行，更多的是因为调用者的原因导致的或者引发了内部状态的改变导致的，
	这种问题一般不处理，直接编译通过，在运行时让调用的程序强制终止，让调用者对程序进行修正
	
throw和throws的区别
1、throws用在函数上
	throw用在函数内
2、throws抛出的是异常类，可以抛出多个，用逗号隔开
	throw抛出的是异常对象
	
异常处理的捕捉形式：
	可以对异常进行针对性处理的方式
具体格式：
	try
	{
		//需要被检测异常的代码
	}
 	catch(异常类 e)//该变量用于接收发生的异常对象
 	{
 		//处理异常的代码
 	}
 	finally
 	{
 		//一定会被执行的代码
 	}
 	
 	多catch 父类的catch放在最下面，否则编译失败
 	
 	异常处理的原则:
 	1、函数内部如果抛出需要检测的异常，那么函数上必须要声明
 		否则必须在函数内用try、catch 捕捉,否则编译失败
 	
 	2、如果调用到了声明异常的函数，要么trycatch，要么throws，否则编译失败
 	
 	3、什么时候catch，什么时候throws
 		异常可以解决catch
 		不能解决 throws
 		
 	4、一个函数果果抛出了多个异常，那么调用时，必须有多个catch进行针对性处理
 		内部有几个需要检测的异常，就抛几个异常，抛出几个，就catch几个
 	
 	finally：异常处理中一定对会被执行的代码
 	就算在catch或者try中return，finally中的代码也会被执行
 	处理在try或者catch中使用System.exit(0); 这种情况直接退出jvm
 	
 	finally中通常用来释放(关闭)资源
 	
 	组合特点
 	try catch finally
 	
 	try catch  没有需要释放的资源
 	
 	try finally 异常无需直接处理。但资源必须关闭
 	
 	异常转换
 	class NoAddException extends Exception{
 		
 	}
 	void addData(data){
 		try{
 			打开数据库
 			添加数据
 		}
 		catch(SqlException e){
 			//处理
 			 throw new NoAddException("添加失败");
 		}
 		finally{
 			关闭数据库
 		}
 		连接数据库
 	}
 	
 	
 	异常注意事项:
 	1、子类在覆盖父类方法时，父类方法如果发生了异常，那么子类方法只能抛出父类的异常或者该异常的子类
 	2、如果父类抛出多个异常，那么子类只能抛出父类异常的子集
 	
 	简单说：子类覆盖父类只能抛出父类的异常或者子类或者子集
 	注意：父类的方法没有抛出异常，子类覆盖时绝对不能抛异常，只能trycatch
  */