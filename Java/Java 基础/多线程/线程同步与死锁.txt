/*
 * 卖票的多线程示例
 * 
 * 这里出现了线程安全问题
 * 产生的原因:
 * 1、多个线程操作共享数据，
 * 2、操作共享数据的代码有多条
 * 
 * 这个时候就需要加上同步控制
 * 
 * 同步的好处:解决了线程的安全问题
 * 同步的弊端： 相对降低了效率，因为同步外的线程都会判断同步锁
 * 同步的前提：同步中必须有多个线程使用同一个锁
 * 
 * 同步代码块 同步锁
 * synchronized(对象){
 * 		需要同步的代码块
	}
 * 
 * 同步函数 也可以解决线程的安全问题，这里使用的同步锁是this
 * 
 *  同步函数和同步代码块的区别
 *  同步函数的锁是固定的this
 *  同步代码块的锁是任意的对象
 *  建议使用同步代码块 
 * 
 * 静态同步函数的锁不是this，因为静态是属于类的，静态函数根本就不持有this对象，静态同步函数的锁是当前类的字节码对象 类名.class 或者this.getClass
 * 
 * 在单例模式的懒汉式写法中，需要用synchronized来解决可能出现的线程安全问题
 * 
 * 死锁通常发生在嵌套同步锁中
 * */