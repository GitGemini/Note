* 字符流两个顶层抽象基类
 *	BufferedReader 与 BufferedWriter 是装饰设计模式的一种体现  
 * 	l--Reader
 * 	l--Writer
 * 
 * 从字符流开始学起:
 * 	记住:操作文字数据，优先考虑字符流
 *  	Writer字符流的输出流的顶层基类，实现 Closeable, Flushable, Appendable 三个接口
 *  	Reader字符流的输入流的顶层基类，实现了Closeable，Readable
 *  Writer：
 *  	l--BufferedWriter
 *			将文本写入字符输出流，缓冲各个字符，从而提供单个字符、数组和字符串的高效写入。 
 *			可以指定缓冲区的大小，或者接受默认的大小。在大多数情况下，默认值就足够大了。
 *			通常 Writer 将其输出立即发送到底层字符或字节流。除非要求提示输出，否则建议用 BufferedWriter 包装所有其 write() 操作可能开销很高的 Writer
 *			（如 FileWriters 和 OutputStreamWriters）。 
 *			PrintWriter out= new PrintWriter(new BufferedWriter(new FileWriter("foo.out")));
 *			将缓冲 PrintWriter 对文件的输出。如果没有缓冲，则每次调用 print() 方法会导致将字符转换为字节，然后立即写入到文件，而这是极其低效的。
 *			构造方法:
 *				BufferedWriter(Writer out)  创建一个使用默认大小输出缓冲区的缓冲字符输出流。 
 *				BufferedWriter(Writer out, int sz)  创建一个使用给定大小输出缓冲区的新缓冲字符输出流。 		
 *			实例方法:
 *				void close() 关闭此流，但要先刷新它。 其实关闭的是传入的Writer
 *				void flush() 刷新该流的缓冲。 
 *				void newLine()  写入一个行分隔符。 
 *				void write(char[] cbuf, int off, int len) 写入字符数组的某一部分。 
 *				void write(int c)  写入单个字符。 
 *				void write(String s, int off, int len)  写入字符串的某一部分。 	
 *		l--CharArrayWriter
 *		l--FilterWriter
 *		l--OutputStreamWriter  转换流
 *			OutputStreamWriter 是字符流通向字节流的桥梁：可使用指定的 charset 将要写入流中的字符编码成字节。
 *			它使用的字符集可以由名称指定或显式给定，否则将接受平台默认的字符集。 
 *			为了获得最高效率，可考虑将 OutputStreamWriter 包装到 BufferedWriter 中，以避免频繁调用转换器。例如： 
 *				Writer out= new BufferedWriter(new OutputStreamWriter(System.out));
 *
 *			l--FileWriter	
 *				用来写入字符文件的便捷类。此类的构造方法假定默认字符编码和默认字节缓冲区大小都是可接受的。
 *				要自己指定这些值，可以先在 FileOutputStream 上构造一个 OutputStreamWriter。 
 *				构造函数:
 *					FileWriter(File file)  根据给定的 File 对象构造一个 FileWriter 对象。 
 *					FileWriter(File file, boolean append) 根据给定的 File 对象构造一个 FileWriter 对象。 
 *					FileWriter(FileDescriptor fd) 构造与某个文件描述符相关联的 FileWriter 对象。 
 *					FileWriter(String fileName) 根据给定的文件名构造一个 FileWriter 对象。 
 *					FileWriter(String fileName, boolean append) 根据给定的文件名以及指示是否附加写入数据的 boolean 值来构造 FileWriter 对象。 
 *				实例方法：
 *					各种各样的write 将数据写入临时存储缓冲区中
 *					flush()：刷新缓冲区，将数据立即直接写入到目的地中
 *					close()：关闭此流，但要先刷新它。关闭以后不能再操作流
 
 *		l--PipedWriter
 *		l--PrintWriter
 *		l--PrintWriter
 *		l--StringWriter
 *		l--CharArrayWriter
 *	Reader:
 *		l--BufferedReader
 * 			从字符输入流中读取文本，缓冲各个字符，从而实现字符、数组和行的高效读取。 
 *			可以指定缓冲区的大小，或者可使用默认的大小。大多数情况下，默认值就足够大了。	
 *			构造函数:
 *				BufferedReader(Reader in)  创建一个使用默认大小输入缓冲区的缓冲字符输入流。 
 *				BufferedReader(Reader in, int sz) 创建一个使用指定大小输入缓冲区的缓冲字符输入流。 
 *			实例方法:
 *        		void close()  关闭该流并释放与之关联的所有资源。 
 *				void mark(int readAheadLimit)   标记流中的当前位置。 
 *				boolean markSupported()  判断此流是否支持 mark() 操作（它一定支持）。 
 *				int read() 读取单个字符。 
 *				int read(char[] cbuf, int off, int len)   将字符读入数组的某一部分。 
 *				String readLine() 读取一个文本行。 
 *				boolean ready() 判断此流是否已准备好被读取。 
 *				void reset() 将流重置到最新的标记。 
 *				long skip(long n) 跳过字符。 
 *
 *			l--LineNumberReader
 *				跟踪行号的缓冲字符输入流。此类定义了方法 setLineNumber(int) 和  getLineNumber()，它们可分别用于设置和获取当前行号。
 *				
 *		l--CharArrayReader
 *		l--FilterReader
 *			l--PushbackReader
 *		l--InputStreamReader  转换流
 *			InputStreamReader 是字节流通向字符流的桥梁：它使用指定的 charset 读取字节并将其解码为字符。
 *			它使用的字符集可以由名称指定或显式给定，或者可以接受平台默认的字符集。 
 *			为了达到最高效率，可要考虑在 BufferedReader 内包装 InputStreamReader。例如： 
 *				BufferedReader in= new BufferedReader(new InputStreamReader(System.in));
 *
 *			l--FileReader
 *				用来读取字符文件的便捷类
 *				
 *				构造函数:
 *					FileReader(File file) 在给定从中读取数据的 File 的情况下创建一个新 FileReader。 
 *					FileReader(FileDescriptor fd) 在给定从中读取数据的 FileDescriptor 的情况下创建一个新 FileReader。 
 *					FileReader(String fileName)  在给定从中读取数据的文件名的情况下创建一个新 FileReader。 
 *				实例方法:
 *					int read()  读取一个字符并返回
 *					int read(char[] cbuf, int offset, int length) 将字符读入数组中的某一部分  返回读取的字符数
 *					int read(char[] cbuf) 将字符读入数组。 返回值读取的字符数，如果已到达流的末尾，则返回 -1
 *		l--PipedReader
 *		l--StringReader
 *		
 *  
 * */