/*关闭这些流无效，因为这些流都没有调用底层资源，数据都在内存中
 * 操纵字节数组的流  
 * ByteArrayInputStream
 * 	
 * 	ByteArrayInputStream 包含一个内部缓冲区，该缓冲区包含从流中读取的字节。内部计数器跟踪 read 方法要提供的下一个字节。 
 *	关闭 ByteArrayInputStream 无效。此类中的方法在关闭此流后仍可被调用，而不会产生任何 IOException。
 *	构造函数:
 *		ByteArrayInputStream(byte[] buf) 创建一个 ByteArrayInputStream，使用 buf 作为其缓冲区数组。 
 *		ByteArrayInputStream(byte[] buf, int offset, int length) 创建 ByteArrayInputStream，使用 buf 作为其缓冲区数组。 
 *
 * ByteArrayOutputStream
 * 	此类实现了一个输出流，其中的数据被写入一个 byte 数组。缓冲区会随着数据的不断写入而自动增长。可使用 toByteArray() 和 toString() 获取数据。 
 *	关闭 ByteArrayOutputStream 无效。此类中的方法在关闭此流后仍可被调用，而不会产生任何 IOException。
 *	构造函数:
 *		ByteArrayOutputStream()   创建一个新的 byte 数组输出流。 
 *		ByteArrayOutputStream(int size) 创建一个新的 byte 数组输出流，它具有指定大小的缓冲区容量（以字节为单位）。 
 *
 * 操纵字符数组的流
 * 
 * CharArrayWriter  
 * CharArrayReader
 * 
 * 
 * 操纵字符串的流
 * 	StringWriter
 *  StringReader
 * */