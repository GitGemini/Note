/**
 * File类 用来将文件或者文件夹封装成对象
 * 方便对文件与文件夹的属性信息进行操作
 * File对象可以作为参数 传递给流的构造函数
 * 
 * 
 * File类中的常用方法:
 *  字段：
 * 		File.separator 文件分隔符，windows 下'\\' linux '/'
 * 		pathSeparator  路径分隔符 windows ';'  linuxx ':' 其实就是系统变量之间的分隔符
 *  	static String pathSeparator  与系统有关的路径分隔符，为了方便，它被表示为一个字符串。 
 *		static char pathSeparatorChar  与系统有关的路径分隔符。 
 *		static String separator 与系统有关的默认名称分隔符，为了方便，它被表示为一个字符串。 
 *		static char separatorChar 与系统有关的默认名称分隔符。 
 *
 * 	构造方法：
 * 		File(File parent, String child) 根据 parent 抽象路径名和 child 路径名字符串创建一个新 File 实例。 
 *		File(String pathname)  通过将给定路径名字符串转换为抽象路径名来创建一个新 File 实例。 
 *		File(String parent, String child) 根据 parent 路径名字符串和 child 路径名字符串创建一个新 File 实例。 *
 *		File(URI uri) 通过将给定的 file: URI 转换为一个抽象路径名来创建一个新的 File 实例。* 
 *
 *  实例方法：
 *  	1、获取文件名称  getName()
 *  	2、获取文件/目录信息
 *  		getAbsolutePath()  获取绝对路径
 *  		getPath() 返回创建时传入的数据
 *  		long getFreeSpace()  返回此抽象路径名指定的分区中未分配的字节数。 ==getTotalSpace
 *			String getName() 返回由此抽象路径名表示的文件或目录的名称。 
 *			String getParent()  返回此抽象路径名父目录的路径名字符串；如果此路径名没有指定父目录，则返回 null。 
 *			File getParentFile() 返回此抽象路径名父目录的抽象路径名；如果此路径名没有指定父目录，则返回 null。 
 *			String getPath() 将此抽象路径名转换为一个路径名字符串。 
 *			long getTotalSpace() 返回此抽象路径名指定的分区大小。 
 *			long getUsableSpace()   返回此抽象路径名指定的分区上可用于此虚拟机的字节数。 ==getFreeSpace
 *
 *  	3、 判断
 *   		 boolean exists() 文件是否存在 
 *  		 boolean canWrite()/canRead()/canExecute  文件是否可读/可写/可执行  
 *  		 boolean isAbsolute()  测试此抽象路径名是否为绝对路径名。 
 *			 boolean isDirectory() 测试此抽象路径名表示的文件是否是一个目录。 
 *			 boolean isFile() 测试此抽象路径名表示的文件是否是一个标准文件。 
 *			 boolean isHidden() 测试此抽象路径名指定的文件是否是一个隐藏文件。 
 *			 int compareTo(File pathname)  按字母顺序比较两个抽象路径名。 
 *
 *		 4、删除
 *			 boolean delete()    删除此抽象路径名表示的文件或目录。 
 *			 void deleteOnExit() 在虚拟机终止时，请求删除此抽象路径名表示的文件或目录。
 *
 *
 *  	5、创建文件或者目录
 *  		 boolean createNewFile()  当且仅当不存在具有此抽象路径名指定名称的文件时，不可分地创建一个新的空文件。 
 *		     static File createTempFile(String prefix, String suffix) 在默认临时文件目录中创建一个空文件，使用给定前缀和后缀生成其名称。 
 *		     static File createTempFile(String prefix, String suffix, File directory) 在指定目录中创建一个新的空文件，使用给定的前缀和后缀字符串生成其名称。 
 *			 boolean mkdir() 创建此抽象路径名指定的目录。 
 *			 boolean mkdirs()  创建此抽象路径名指定的目录，包括所有必需但不存在的父目录。 
 *
 *		6、文件大小 length()
 *	    7、最后一次修改时间 lastModified()
 *
 *		8、修改
 *		  	boolean renameTo(File dest) 重新命名此抽象路径名表示的文件。 具有剪切功能
 *		  	boolean setExecutable(boolean executable) 设置此抽象路径名所有者执行权限的一个便捷方法。 
 *		  	boolean setExecutable(boolean executable, boolean ownerOnly) 设置此抽象路径名的所有者或所有用户的执行权限。 
 *        	boolean setLastModified(long time)  设置此抽象路径名指定的文件或目录的最后一次修改时间。 
 *        	boolean setReadable(boolean readable)  设置此抽象路径名所有者读权限的一个便捷方法。 
 *		  	boolean setReadable(boolean readable, boolean ownerOnly)  设置此抽象路径名的所有者或所有用户的读权限。 
 *		  	boolean setReadOnly() 标记此抽象路径名指定的文件或目录，从而只能对其进行读操作。 
 *        	boolean setWritable(boolean writable) 设置此抽象路径名所有者写权限的一个便捷方法。 
 *        	boolean setWritable(boolean writable, boolean ownerOnly) 设置此抽象路径名的所有者或所有用户的写权限。 
 *      
 *      9、获取文件列表
 *      	  调用这些方法的File对象，必须封装的是目录，是文件则返回null，如果访问的是系统级目录，也会发生空指针异常
 *      	 如果目录存在但没有内容。会返回一个长度为0的数组
 *      	 String[] list() 返回一个字符串数组，这些字符串指定此抽象路径名表示的目录中的文件和目录。 
 *			 String[] list(FilenameFilter filter) 返回一个字符串数组，这些字符串指定此抽象路径名表示的目录中满足指定过滤器的文件和目录。 
 *			 File[] listFiles() 返回一个抽象路径名数组，这些路径名表示此抽象路径名表示的目录中的文件。 
 *			 File[] listFiles(FileFilter filter)  返回抽象路径名数组，这些路径名表示此抽象路径名表示的目录中满足指定过滤器的文件和目录。 
 *			 File[] listFiles(FilenameFilter filter)  返回抽象路径名数组，这些路径名表示此抽象路径名表示的目录中满足指定过滤器的文件和目录。 
 *			 static File[] listRoots() 列出可用的文件系统根。 
 *			
 *			文件或者文件名过滤的用法
 *			 	public class SuffixFilter implements FilenameFilter 
				{
					private String ext;
					public SuffixFilter(String ext) 
					{
						this.ext=ext;
					}
					@Override
					public boolean accept(File dir, String name) 
					{
						return name.endsWith(ext);
					}
				
				}
 *		转换: URI toURI()  构造一个表示此抽象路径名的 file: URI。 =="file:/"+getAbsoluteFile()
 */